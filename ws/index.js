import Emitter from 'component-emitter';
import Backoff from 'backo2';
import { isFunction, isUndefined } from 'by-helpers';

// Ëøô‰∏™Â∞ÅË£ÖÁöÑ WS ÂíåÂÆû‰æãÊó∂Èó¥ÁöÑÈÄö‰ø° ÊòØÈÄöËøá Emitter Êù•ÁöÑÔºåemit Âíå on ‰∫ã‰ª∂Êù•ÂèëÈÄÅÂíåÊé•Êî∂
// Âõ†‰∏∫‰ΩøÁî® Emitter(WS.prototype)Ëøô‰∏™ÊñπÊ≥ïËøõË°å‰∫ÜÂåÖË£ÖÔºå
// ÊâÄ‰ª•Â∞ÅË£ÖÂ•ΩÁöÑ WS ÂèØ‰ª•‰ΩøÁî® Emitter ÁöÑ emit Âíå on ÊñπÊ≥ï

// Êï¥‰ΩìÊÄùË∑ØÔºö
// 1.ÂàõÂª∫ÂÆû‰æã ÂàùÂßãÂåñÔºõ 
//   ÊâßË°å open ÊñπÊ≥ïÔºåËøõË°åËøûÊé•ÔºåËÄÉËôëÊòØÂê¶Ëá™Âä®ËøûÊé•üåøÔºåÊòØÂàôÊéâÁî®
//   open ÊñπÊ≥ïÈáåÈù¢ÊòØ addEventListeners ÊñπÊ≥ïÔºåÂåÖÂê´‰∫ÜÂõõ‰∏™ ws ÊñπÊ≥ï:
//   ÂÖàÊ≥®ÊÑèÔºöÂÜÖÈÉ®Áä∂ÊÄÅÊúâËøôÂá†‰∏™ÔºöconnectedÔºåreconnectingÔºåreadyState

//   onopenÔºö 
//     1.ËÆæÁΩÆÁä∂ÊÄÅ readyStateÔºö'open; connected: true
//     1.setPing, 
//     2.emit ‰∏§‰∏™ËøûÊé•Ôºö'reconnect' Âíå 'connect' ÔºàÈúÄË¶ÅÂà§Êñ≠ÊòØÂì™‰∏™Ôºâ

//   oncloseÔºö
//     1.ËÆæÁΩÆÁä∂ÊÄÅ readyStateÔºö'closed'; connecting: falseÔºõconnectedÔºöfalse
//     2.emit 'close' ‰∫ã‰ª∂
//     3.ÊâßË°åÈáçËøû reconnect(); Áî®Êà∑‰∏ªÂä®ÂÖ≥Èó≠Âàô‰∏çÈáçËøû

//   onmessageÔºö
//     1.Ê†πÊçÆËøîÂõûÂÄºÊù•Âõû ping pong
//     2.Â¶ÇÊûúÊòØËøîÂõûÊù•ÁöÑÊòØ pong Ê∂àÊÅØ
//         ÂàôÂà§Êñ≠ÂìçÂ∫îÊó∂Èó¥Â∞è‰∫é 3000ÔºåÂ∞± emit 'heart_back',‰∏îËÆæÁΩÆ heartError = falseÔºõÂÜç setPingÔºàÔºâ
//     3.Â¶ÇÊûúËøîÂõûÊù•ÁöÑÊï∞ÊçÆÊúâ tpoicÔºåÂàô emit Ëøô‰∏™ topic
//     4.ÂÖ∂‰ªñÊÉÖÂÜµÂàôÁõ¥Êé• emit 'data' Âíå emit 'message',Âπ∂‰∏îÂ∏¶‰∏äÊï∞ÊçÆ

//   onerrorÔºö
//     1.ËÆæÁΩÆÁä∂ÊÄÅ readyStateÔºö'closed'
//     2.emit 'error' ‰∫ã‰ª∂
//     3.ÊâßË°å onclose ÂÖ≥Èó≠Êéâ

// 2.ÈáçËøû ÔºöreconnectÔºåËÄÉËôëÊòØÂê¶Ëá™Âä®ÈáçËøûüåø
//   ÊúâÊúÄÂ§ßÈáçËøûÊï∞ reconnectionAttempts
//   Èó¥ÈöîÊó∂Èó¥ reconnectionDelay
//   ÊúÄÂ§ßÈó¥ÈöîÊó∂Èó¥ reconnectionDelayMax
//   1.ÂÖàÂà§Êñ≠ÊòØÂê¶Ê≠£Âú®ËøûÊé• reconnecting ÊàñËÄÖË∑≥ËøáËøûÊé• skipReconect
//   2.Âà§Êñ≠ÊòØÂê¶Ë∂ÖËøáÊúÄÂ§ßÈáçËøûÊ¨°Êï∞
//   3. Â¶ÇÊûúË∂ÖËøáÊúÄÂ§ßÈáçËøûÊ¨°Êï∞Ôºö
//      iÔºöÊ∏ÖÈô§ÂøÉË∑≥ÂÆöÊó∂Âô®
//      iiÔºöËÆæÁΩÆÁä∂ÊÄÅ reconnectingÔºö false
//      iiiÔºöÊâßË°å closeÊñπÊ≥ïÔºõclearUp()Ôºõbackoff.reset()
//      ivÔºöemit 'reconnect_failed'
//   4.Â¶ÇÊûúÊ≤°ÊúâË∂ÖËøáÊúÄÂ§ßÈáçËøûÊ¨°Êï∞Ôºö
//      iÔºöËé∑Âèñ delay Áî®‰∫éÂÆöÊó∂Âô®ÔºõËÆæÁΩÆÁä∂ÊÄÅ reconnectingÔºö true
//      iiÔºöÂ¶ÇÊûúË∑≥ËøáËøûÊé• skipReconectÔºötrueÔºõ Âàô return
//      iiiÔºöemit 'reconnect_attempt' Âíå 'reconnecting'
//      iv: Â¶ÇÊûúÂ∞ùËØïÈáçËøûÁöÑÊ¨°Êï∞Â§ß‰∫éËÆæÁΩÆÁöÑÈòàÂÄºÔºåÂàô emit ‚Äòreconnect_report‚Äô ‰∏äÊä•
//      vi: ÊâßË°å open() ÊñπÊ≥ï

// 3.ËÆæÁΩÆÂøÉË∑≥Êú∫Âà∂ÂíåÂøÉË∑≥Ê£ÄÊµã setPingÔºö
//   ËÆæÁΩÆÂÆöÊó∂Âô®Êù•‰∏çÊñ≠ÁöÑÊâßË°å ping Âíå onHeartbeat ÔºåËøô‰∏™ÂÆöÊó∂Âô®Áî®ÁöÑÊòØ pingInterval Êó∂Èó¥Èó¥Èöî 15000
//     pingÔºöÂèëÈÄÅ ping Ê∂àÊÅØÔºå‰æãÂ¶Ç this.send({ op: 'ping', args: [new Date().getTime()] });
//     onHeartbeat: ÂÆöÊó∂Âô®Ê£ÄÊµãÂøÉË∑≥ÔºõËøô‰∏™ÂÆöÊó∂Âô®Áî®ÁöÑÊòØ pingTimeout 3000s

// 4.ËÄÉËôëÊòØÂê¶Ëá™Âä®ËøûÊé•ÔºõÊòØÂê¶Ëá™Âä®ÈáçËøû

Emitter(WebSocket.prototype);
/* eslint-disable */
class WS {
  constructor(uri, opts = {}) {
    // if (uri && (typeof uri === 'object')) {
    //   opts = uri;
    //   uri = opts.uri;
    // }
    // this.opts = opts;
    const {
      debug,
      closeCode,
      autoConnect = true,
      reconnectionAttempts,
      reconnectionDelay,
      reconnectionDelayMax,
      reconnectionReportThreshold,
      reconnectionReportInterval,
      reconnectionReportMax,
      randomizationFactor,
      timeout,
      reconnection,
      protocols,
    } = opts;

    // ÂèØËÆæÁΩÆÂèòÈáè
    this.closeCode = isUndefined(closeCode) ? [1000] : (Array.isArray(closeCode) ? closeCode : [closeCode]);
    this.uri = uri;
    this.protocols = protocols;
    this.debug = debug || false;
    this.autoConnect = autoConnect; // ÊòØÂê¶Ëá™Âä®ËøûÊé•
    this.reconnection = reconnection !== false; // ÊòØÂê¶Ëá™Âä®ÈáçËøûÔºåÈªòËÆ§true
    this.reconnectionReportThreshold = reconnectionReportThreshold || 3;
    this.reconnectionReportInterval = reconnectionReportInterval || 3;
    this.reconnectionReportMax = reconnectionReportMax || 22;
    this.reconnectionAttempts(reconnectionAttempts || Infinity); // ÊúÄÂ§ßÈáçËøûÊ¨°Êï∞
    this.reconnectionDelay(reconnectionDelay || 1000); // Èó¥ÈöîÊó∂Èó¥
    this.reconnectionDelayMax(reconnectionDelayMax || 5000); // ÊúÄÂ§ßÈó¥ÈöîÊó∂Èó¥
    this.randomizationFactor(randomizationFactor || 0.5); // Èó¥ÈöîÈöèÊú∫Â¢ûÈïøÊï∞
    this.backoff = new Backoff({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor(),
    });
    this.timeout(timeout || 10000); // Ë∂ÖÊó∂Êó∂Èó¥ËÆæÁΩÆ ms

    // ÂÜÖÈÉ®ÂèòÈáè
    this.engine = null; // websocket
    this.connected = false; // ÊòØÂê¶Â∑≤ËøûÊé•
    this.readyState = 'closed'; // ÂΩìÂâçÁä∂ÊÄÅ 'open', 'opening', 'closed', 'closed_user'
    this.reconnecting = false; // Ê≠£Âú®ÈáçËøû
    this.skipReconect = false;
    this.pingIntervalTimer = null; // ping timer
    this.pingTimeoutTimer = null; // ping timeout Timer
    this.heartError = false;
    // note: mÁ´ôÂøÉË∑≥Êú∫Âà∂
    this.pingInterval = 15000;
    this.pingTimeout = 3000;
    this.ev = []; // ÂÜÖÈÉ®‰∫ã‰ª∂ËÆ¢ÈòÖ
    // this.subs = []; // ËÆ¢ÈòÖtopicÊï∞ÁªÑ
    // this.topicArr = []; // ËÆ¢ÈòÖtopic Êï∞ÁªÑ
    // ÈúÄË¶ÅËá™Âä®ËøûÊé•ÔºåÂàôË∞ÉÁî®open()
    this.connectStart = new Date().getTime();
    this.openStart = null;
    if (this.autoConnect) this.open();
    if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'ÂàõÂª∫ socket ÂÆû‰æã');
  }

  changeUrl(uri) {
    this.uri = uri;
  }

  getUrl() {
    const { uri } = this;
    return isFunction(uri) ? uri() : uri;
  }

  open() {
    this.openStart = new Date().getTime();
    // const self = this;
    if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'open ÂºÄÂßãÁä∂ÊÄÅ:', this.readyState, 'ËøûÊé•Âú∞ÂùÄÔºö', this.getUrl());
    if (~this.readyState.indexOf('open')) return;
    try {
      // 2021-11-19 safari 15.1ÈªòËÆ§ÂºÄÂêØ NSURL Session Websocket, Â§ßÂåÖ‰ºöËá™Âä®ÂàÜÁâáÔºå‰∏çÊîØÊåÅÂÆ¢Êà∑Á´Ø‰∏ªÂä®ÂÖ≥Èó≠ËøûÊé•ÔºåÁõÆÂâçÂà§Êñ≠Êñ∞ÁâàÊú¨Âä†c=0 ‰∏çÂºÄÂêØÂéãÁº©
      const safari =
        process.browser &&
        navigator.userAgent.toLowerCase().match(/version\/([\d.]+).*safari/);
      const encoding = safari && Number(safari[1]) >= 15.1 ? '&c=0' : '';
      const url = /\?/.test(this.getUrl())
        ? `${this.getUrl()}&timestamp=${new Date().getTime()}${encoding}`
        : `${this.getUrl()}?timestamp=${new Date().getTime()}${encoding}`;
      // todo: Â¢ûÂä†timestampÂèÇÊï∞ÊØîËæÉÁîüÁ°¨
      this.engine = new WebSocket(url, this.protocols);
    } catch (e) {
      if (this.debug) {
        console.error('[socket]ÂàõÂª∫ÂÆû‰æãÂèëÁîüÈîôËØØ', e);
      }
      this.emit('open_error', { code: 4998, reason: e.message || e }); // report
    }
    this.readyState = 'opening';
    this.skipReconect = false;

    this.addEventListeners();
    // Ê∑ªÂä†ÈìæÊé•Ë∂ÖÊó∂Êú∫Âà∂ÔºåiOS Âπ≥Âè∞‰∏ç‰ºöË¢´Âä®Ëß¶Âèë error ‰∫ã‰ª∂
    if (this._timeout) {
      const timeout = this._timeout;
      if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'Ë∂ÖÊó∂Â∞ÜÂú®ÂºÄÂßãÈáçËøû', timeout);
      const timer = setTimeout(() => {
        // todo onerrorÊ≤°ÊúâÊé•Êî∂
        this.engine && this.engine.emit('open_timeout', { code: 4997, reason: 'open_timeout' });
        this.emit('connect_timeout', timeout);
      }, timeout);
      this.ev.push({
        destroy: () => {
          clearTimeout(timer);
        },
      });
    }
  }

  send(obj) {
    if (this.connected) {
      this.engine.send(JSON.stringify(obj));
    }
  }

  close(code = 1005) {
    this.onClose({ code, reason: 'close_by_user' });
  }

  /* private function */

  onOpen() {
    if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'WS prototype onOpen ÊâßË°å');
    this.readyState = 'open';
    this.clearEV();
    this.setPing();
    this.connected = true;
    if (this.reconnecting) {
      const attempt = this.backoff.attempts;
      this.reconnecting = false;
      this.backoff.reset();
      this.emit('reconnect', attempt);
    } else {
      this.emit('connect');
    }
  }

  onData(data) {
    const { ret_msg, topic, request, success, type, conn_id, ping, op, timestampE6, timestamp_e6 } = data;
    // ÂÖºÂÆπÁé∞Ë¥ßÂíåÂêàÁ∫¶ÁöÑserver ping Ê†ºÂºè
    if (ping) {
      this.send({pong: ping});
      return;
    }
    if (op === 'ping') {
      const { op, ...other } = data;
      this.send({op: 'pong', ...other});
      return;
    }
    if (ret_msg === 'pong') {
      clearTimeout(this.pingTimeoutTimer);
      const now = new Date().getTime();
      const { op, args } = request;
      const reqTime = args[0];
      if (reqTime) {
        if (now - reqTime < 3000) {
          if (this.heartError) {
            this.emit('heart_back', { code: 4995, reason: 'heart_back' });
            this.heartError = false;
          }
        }
      }
      this.setPing();
    } else if (topic) {
      this.emit(topic, { type, data: data.data, timestampE6: timestamp_e6 || timestampE6 });
    } else if (request) {
      const { op } = request;
      if (success) {
        this.emit(`${op}_success`, conn_id);
      } else {
        this.emit(`${op}_fail`, conn_id);
      }
    } else {
      this.emit('data', data);
      this.emit('message', data);
    }
  }

  onClose({ code, reason }) {
    if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'WS prototype onClose ÊâßË°å:', reason);

    this.reconnecting = false;
    this.connected = false;
    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // 1006‰øùÁïôcode
    let c = code;
    if (c === 1006) {
      c = 4006;
    } else if (c === 1005) {
      c = 4005;
    }
    // Firefox will throw error when ws closed normally using 1001
    if (code !== 1001) this.engine.close(c);
    this.clearUp();
    this.readyState = 'closed';
    this.emit('close', { code, reason });

    // Áî®Êà∑‰∏ªÂä®ÂÖ≥Èó≠‰∏çËøõË°åÈáçËøûÔºå`closeCode` ÂèØ‰ª•Ëá™Ë°åÈÖçÁΩÆÔºåÊîØÊåÅ `0` ÔºåÈÖçÁΩÆ `[]` Êó∂Ê∞∏ËøúÈáçËøû
    if (this.closeCode.includes(code)) {
      this.skipReconect = true;
      this.reconnecting = false;
      this.readyState = 'closed_user';
      this.backoff.reset();
      if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'Áî®Êà∑‰∏ªÂä®ÂÖ≥Èó≠', reason);
    } else {
      if (this.reconnection && !this.skipReconect) {
        this.reconnect();
      }
    }
  }

  onError(err) {
    if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'onError ÊâßË°å:', err);
    this.clearUp();
    this.readyState = 'closed';
    this.emit('error', err);
    this.onClose(err);
  }

  reconnect() {
    if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'WS prototype reconnect ÊâßË°å:');
    if (this.reconnecting || this.skipReconect) {
      return;
    }
    if (this.backoff.attempts > this._reconnectionAttempts) {
      if (this.debug) console.error('[socket]Ë∂ÖËøáÊúÄÂ§ßÈáçËøûÊ¨°Êï∞, ÈáçËøûÂΩªÂ∫ïÂ§±Ë¥•');
      // clear timers
      clearTimeout(this.pingIntervalTimer);
      clearTimeout(this.pingTimeoutTimer);

      // remove
      this.engine.close();
      this.clearUp();
      this.backoff.reset();

      this.emit('reconnect_failed');
      this.reconnecting = false;
    } else {
      const delay = this.backoff.duration();
      if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'Á¨¨Âá†Ê¨°ÈáçËøûÔºö', this.backoff.attempts, 'Á≠âÂæÖ %dms ÂºÄÂßãÂèëËµ∑ÈáçËøûÔºö', delay);
      this.reconnecting = true;
      const timer = setTimeout(() => {
        if (this.skipReconect) return;
        this.emit('reconnect_attempt', this.backoff.attempts); // ÂèëÈÄÅ ÈáçËøûÊ¨°Êï∞ ‰∫ã‰ª∂
        this.emit('reconnecting', this.backoff.attempts); // ÂèëÈÄÅ‰∫ã‰ª∂

        if (
          this.backoff.attempts > this.reconnectionReportThreshold
          && (this.backoff.attempts % this.reconnectionReportInterval) === 0
          && this.backoff.attempts < this.reconnectionReportMax
        ) {
          this.emit('reconnect_report', this.backoff.attempts);
        }

        this.open();
      }, delay);
      // ‰∫ã‰ª∂ÁªÑ
      this.ev.push({
        destroy: () => {
          clearTimeout(timer);
        },
      });
    }
  }

  ping() {
    this.send({ op: 'ping', args: [new Date().getTime()] });
  }

  // reset ping timeout
  // 3000s 
  onHeartbeat(timeout) {
    clearTimeout(this.pingTimeoutTimer);
    this.pingTimeoutTimer = setTimeout(() => {
      if (this.readyState === 'closed') return;
      // this.onClose({ code: 4996, reason: 'ping timeout' });
      this.emit('heart_error', { code: 4996, reason: 'ping timeout' });
      this.heartError = true;
    }, timeout);
  }

  // ÂøÉË∑≥Êú∫Âà∂
  setPing() {
    clearTimeout(this.pingIntervalTimer);
    this.pingIntervalTimer = setTimeout(() => {
      if (this.debug) console.log('%c[socket]', 'color: #49c9c9;', 'WS send ping');
      this.ping();
      this.onHeartbeat(this.pingTimeout);
    }, this.pingInterval);
  }

  addEventListeners() {
    const { engine } = this;
    if (engine) {
      engine.onopen = () => {
        this.onOpen();
      };
      engine.onclose = ({ code, reason }) => {
        this.onClose({ code, reason });
      };
      engine.onmessage = (ev) => {
        const data = JSON.parse(ev.data);
        if (Array.isArray(data)) {
          for (let i = 0, len = data.length; i < len; i += 1) {
            setTimeout(() => {
              this.onData(data[i]);
            }, 0);
          }
        } else {
          this.onData(data);
        }
        // engine.removeListener('onmessage');
      };
      engine.onerror = () => {
        this.onError({ code: 4999, reason: 'onerror' });
      };
      engine.once('open_timeout', (e) => {
        this.onError(e);
      });
    }
  }

  // ÈáçÁΩÆwebsocketÂõûË∞ÉÂáΩÊï∞
  clearUp() {
    if (this.debug) console.log('ws-->clearUp');
    const { engine } = this;
    engine.onopen = () => {};
    engine.onclose = () => {};
    engine.onmessage = () => {};
    engine.onerror = () => {};
    this.clearEV();
  }

  clearEV() {
    const evLength = this.ev.length;
    for (let i = 0; i < evLength; i += 1) {
      const sub = this.ev.shift();
      sub.destroy();
    }
  }
  /* eslint-disable */
  // /* eslint-disable no-underscore-dangle */
  reconnectionAttempts(v) {
    if (!arguments.length) return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  }

  reconnectionDelay(v) {
    if (!arguments.length) return this._reconnectionDelay;
    this._reconnectionDelay = v;
    this.backoff && this.backoff.setMin(v);
    return this;
  }

  reconnectionDelayMax(v) {
    if (!arguments.length) return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    this.backoff && this.backoff.setMax(v);
    return this;
  }

  randomizationFactor(v) {
    if (!arguments.length) return this._randomizationFactor;
    this._randomizationFactor = v;
    this.backoff && this.backoff.setJitter(v);
    return this;
  };

  timeout(v) {
    if (!arguments.length) return this._timeout;
    this._timeout = v;
    return this;
  }
}

Emitter(WS.prototype);

export default WS;
