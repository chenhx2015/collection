// 判断是否是有效的数独
// 规则：
// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 思路:
// 三个遍历，行，列，块 遍历
// 块遍历的核心就是整体9个块,按照 大块 找出 小块 的的起始坐标

// 方法一：
function isValidSuduku(board) {
  for(let i = 0; i < 9; i++) {
    let col = new Set();
    let row = new Set();
    for(let j = 0; j < 9; j++) {
      if(board[i][j] != '.') {
        // 判断行
        if(!row.has(board[i][j])) {
          row.add(board[i][j])
        } else {
          return false;
        }
        // 判断列
        if(board[j][i] != '.') {
          if(!col.has(board[j][i])) {
            col.add(board[j][i])
          } else {
            return false;
          }
        }
      }
    }
    // 🤔️ 这个坐标不知道是怎么找的
    let block = new Set();
    let x = parseInt(i / 3) * 3 // 关键是找到块的 x y 坐标
    let y = i % 3 * 3;
    for(let k = 0; k < 9; k++) {
      // 判断块
      if(board[x][y] != '.') {
        if(!block.has(board[x][y])) {
          block.add(board[x][y])
        } else {
          return false;
        }
      }
      y++;
      if((k + 1 ) % 3 === 0) {
        // 第4个换行 
        x += 1;
        y -= 3
      }
    }
  }
  return true;
}

// test
let board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]

let board2 = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]

console.log('isValidSuduku', isValidSuduku(board)); // true
console.log('isValidSuduku2', isValidSuduku(board2)); // false
